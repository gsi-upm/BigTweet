/*
* 
* 
* This file is part of Big Tweet. 
* 
* Big Tweet has been developed by members of the research Group on 
* Intelligent Systems [GSI] (Grupo de Sistemas Inteligentes), 
* acknowledged group by the  Technical University of Madrid [UPM] 
* (Universidad Polit√©cnica de Madrid) 
* 
* Authors:
* Mercedes Garijo
* Carlos A. Iglesias
* Emilio Serrano
* 
* Contact: 
* http://www.gsi.dit.upm.es/;
* 
* 
* 
* Big Tweet is free software: 
* you can redistribute it and/or modify it under the terms of the GNU 
* General Public License as published by the Free Software Foundation, 
* either version 3 of the License, or (at your option) any later version. 
*
* 
* Big Tweet is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
* GNU General Public License for more details.
* 
* You should have received a copy of the GNU General Public License
* along with Big Tweet. If not, see <http://www.gnu.org/licenses/>
 */

package bigtweet.view;

import bigtweet.BTSim;
import bigtweet.model.EvaluationTools;
import bigtweet.model.GraphTools;
import bigtweet.model.SpreadModel;
import bigtweet.model.SpreadModelM1;
import bigtweet.model.agents.UserAgent;
import java.awt.Component;
import java.awt.Rectangle;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JCheckBox;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.ListCellRenderer;
import javax.swing.ListModel;
import javax.swing.ListSelectionModel;
import javax.swing.SpinnerModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.UIManager;
import javax.swing.border.EmptyBorder;

/**
 *
 * @author esfupm
 */
public class AdvancedTab extends javax.swing.JFrame {

    /**
     * Creates new form AdvancedTab
     */
    private BTSim bt;

    public AdvancedTab(BTSim bt) {
        initComponents();
        this.bt = bt;
       
       

        //logo y nombre panel
        File f = new File(this.getClass().getProtectionDomain().getCodeSource().getLocation().getPath());
        String logoPath = f.getPath() + "/bigtweet/logo2.png";
        ImageIcon image = new ImageIcon(logoPath);
        logoLabel.setIcon(image);
        logoLabel.setText("");
       
        this.getContentPane().setName("Advanced options");

        loadComboBoxes();
         


    }        
      private List<Integer> getNodesSelected(){            
        ListModel model = this.iJlist.getModel();
        List<Integer> list = new ArrayList<>();
        int n = model.getSize();
        for (int i = 0; i < n; i++) {
          CheckableItem item = (CheckableItem) model.getElementAt(i);
          if (item.isSelected()) {
            list.add(new Integer(item.toString()));            
          }
        }
        return list;
      }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        logoLabel = new javax.swing.JLabel();
        export = new javax.swing.JButton();
        highlight = new javax.swing.JButton();
        comboModel = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        addBeacons = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        scrollList = new javax.swing.JScrollPane();
        iJlist = new javax.swing.JList();
        comboModel2 = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        nagents = new javax.swing.JSpinner();
        jLabel3 = new javax.swing.JLabel();
        importantNodes = new javax.swing.JButton();
        beaconstowards = new javax.swing.JButton();
        highlightselected = new javax.swing.JButton();
        compare = new javax.swing.JButton();
        showStates = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        logoLabel.setText("jLabel1");

        export.setText("Export and load gefx");
        export.setActionCommand("export and load gefx");
        export.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportActionPerformed(evt);
            }
        });

        highlight.setText("highlight agent");
        highlight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                highlightActionPerformed(evt);
            }
        });

        comboModel.setToolTipText("");
        comboModel.setName(""); // NOI18N
        comboModel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboModelActionPerformed(evt);
            }
        });

        jLabel1.setText("Spread model");

        addBeacons.setText("add beacon");
        addBeacons.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBeaconsActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Important nodes"));
        jPanel1.setName("Important nodes"); // NOI18N

        scrollList.setViewportView(iJlist);

        comboModel2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel2.setText("Centrality");

        nagents.setName("Number of nodes"); // NOI18N

        jLabel3.setText("N agents");

        importantNodes.setText("get nodes");
        importantNodes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importantNodesActionPerformed(evt);
            }
        });

        beaconstowards.setText("beacon towards selection");
        beaconstowards.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                beaconstowardsActionPerformed(evt);
            }
        });

        highlightselected.setText("highlight selection");
        highlightselected.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                highlightselectedActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(importantNodes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(scrollList, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(comboModel2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(nagents, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(beaconstowards, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(highlightselected, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(comboModel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(nagents, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(importantNodes)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrollList, javax.swing.GroupLayout.DEFAULT_SIZE, 83, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(beaconstowards)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(highlightselected)
                .addContainerGap())
        );

        compare.setText("compare with real data");
        compare.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compareActionPerformed(evt);
            }
        });

        showStates.setText("show states");
        showStates.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showStatesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addComponent(logoLabel)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(export, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(comboModel, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(addBeacons, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(highlight, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(compare, javax.swing.GroupLayout.DEFAULT_SIZE, 155, Short.MAX_VALUE)
                    .addComponent(showStates, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addComponent(logoLabel)
                .addGap(52, 52, 52)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(comboModel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(export)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addBeacons)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(highlight)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(compare)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(showStates)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 148, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void exportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportActionPerformed


        if (isGraphLoaded()) {
            File f = new File(BTSim.getProperty("exportedgraph"));
            try {

                GraphTools.graphToGexf(bt.getSpreadModel().getGraph(), f.getCanonicalPath());
                GraphTools.loadGraphInDesktop(f.getCanonicalPath());
            } catch (IOException ex) {
                Logger.getLogger(AdvancedTab.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }//GEN-LAST:event_exportActionPerformed

    private void highlightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_highlightActionPerformed
        if(!this.isGraphLoaded()) return;
        String s = JOptionPane.showInputDialog("Introduce agent identifier, first agent and last agents created: " + bt.getAgents().get(0).getName() + ", " + bt.getAgents().get(bt.getAgents().size() - 1).getName());
        if (s != null && !s.isEmpty()) {
            UserAgent a = bt.getAgent(s);
            if (a == null) {
                JOptionPane.showMessageDialog(this, "Agent name not found", "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                //represenation does not affect the real state of the agent, this is just representation (state in node) 
                a.getNode().setAttribute("ui.class", "highlighted");
            }

        }
    }//GEN-LAST:event_highlightActionPerformed

    private void comboModelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboModelActionPerformed
        String model = (String) comboModel.getSelectedItem();
        bt.setSpreadModelName(model);
        bt.stop();
    }//GEN-LAST:event_comboModelActionPerformed

    private void addBeaconsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBeaconsActionPerformed
     if(this.isGraphLoaded())   ((SpreadModelM1) bt.getSpreadModel()).addBeaconsBA();
    }//GEN-LAST:event_addBeaconsActionPerformed

    private void importantNodesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importantNodesActionPerformed
        if (isGraphLoaded()) {
            
            
            String nodes[] = GraphTools.getImportantNodes(bt.getSpreadModel().getGraph(), this.comboModel2.getSelectedItem().toString().substring(0, 1) ,(Integer) this.nagents.getValue());       
            
            
            iJlist.setModel(new JList(createCheckableItems(nodes)).getModel());
            iJlist.setCellRenderer(new CheckListRenderer());
            iJlist.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
            iJlist.setBorder(new EmptyBorder(0, 4, 0, 0));
            iJlist.addMouseListener(new MouseAdapter() {
                public void mouseClicked(MouseEvent e) {
                    int index = iJlist.locationToIndex(e.getPoint());
                    CheckableItem item = (CheckableItem) iJlist.getModel()
                            .getElementAt(index);
                    item.setSelected(!item.isSelected());
                    Rectangle rect = iJlist.getCellBounds(index, index);
                    iJlist.repaint(rect);
                }
            });


        }



    }//GEN-LAST:event_importantNodesActionPerformed

    private void highlightselectedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_highlightselectedActionPerformed
        
        
        if(!this.isGraphLoaded()) return;
        //clear selected
        for(UserAgent a: bt.getAgents()){
            a.getNode().setAttribute("ui.class", a.getState());
        }
        
        //new selected
        List<Integer> l= this.getNodesSelected();                
        for(Integer i : l){
            bt.getAgents().get(i).getNode().setAttribute("ui.class", "highlighted");
        }
        
        
    }//GEN-LAST:event_highlightselectedActionPerformed

    private void beaconstowardsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_beaconstowardsActionPerformed
       
        List<Integer> list = this.getNodesSelected();
        if(list.isEmpty())   JOptionPane.showMessageDialog(this, "No agent selected in the important nodes panel", "Error", JOptionPane.ERROR_MESSAGE);
       else  ((SpreadModelM1) bt.getSpreadModel()).addBeaconTowards(this.getNodesSelected());
    }//GEN-LAST:event_beaconstowardsActionPerformed

    private void compareActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_compareActionPerformed
      EvaluationTools.compareWithRealData(true, bt.getNumUsers(), (int) bt.seed());
    }//GEN-LAST:event_compareActionPerformed

    private void showStatesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showStatesActionPerformed
        EvaluationTools.showNumberOfStates(true,bt.getNumUsers(),(int) bt.seed());
    }//GEN-LAST:event_showStatesActionPerformed
    private CheckableItem[] createCheckableItems(String[] strs) {
        int n = strs.length;
        CheckableItem[] items = new CheckableItem[n];
        for (int i = 0; i < n; i++) {
            items[i] = new CheckableItem(strs[i]);
            items[i].setSelected(true);

        }
        return items;
    }
    
    
    private boolean isGraphLoaded(){
        if(bt.getSpreadModel()!=null && bt.getSpreadModel().getGraph()!=null) return true;
        JOptionPane.showMessageDialog(this, "First, start the model and the network with the pause button", "Error", JOptionPane.ERROR_MESSAGE);
        return false;
    }

    private void loadComboBoxes() {
            //cargar lista de modelos en jcombobox
        this.comboModel.removeAllItems();
        String modelPreCombo = bt.getSpreadModelName();
        for (String spm : SpreadModel.getListOfModels()) {
            this.comboModel.addItem(spm);
        }
        this.comboModel.setSelectedItem(modelPreCombo);
        
        
        //cargar lista de modelos en jcombobox de centrality
        this.comboModel2.removeAllItems();
         this.comboModel2.addItem("betwenness");
         this.comboModel2.addItem("closeness");
         this.comboModel2.addItem("degree");
         this.comboModel2.addItem("random");
        this.comboModel2.setSelectedItem("betwenness");
        
        SpinnerModel model = new SpinnerNumberModel(10,  1,   bt.getNumUsers(), 1); 
        nagents.setModel(model);
    }

    class CheckListRenderer extends JCheckBox implements ListCellRenderer {

        public CheckListRenderer() {
            setBackground(UIManager.getColor("List.textBackground"));
            setForeground(UIManager.getColor("List.textForeground"));
        }

        public Component getListCellRendererComponent(JList list, Object value,
                int index, boolean isSelected, boolean hasFocus) {
            setEnabled(list.isEnabled());
            setSelected(((CheckableItem) value).isSelected());
            setFont(list.getFont());
            setText(value.toString());
            return this;
        }
    }

    class CheckableItem {

        private String str;
        private boolean isSelected;

        public CheckableItem(String str) {
            this.str = str;
            isSelected = false;
        }

        public void setSelected(boolean b) {
            isSelected = b;
        }

        public boolean isSelected() {
            return isSelected;
        }

        public String toString() {
            return str;
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdvancedTab.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdvancedTab.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdvancedTab.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdvancedTab.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AdvancedTab(null).setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBeacons;
    private javax.swing.JButton beaconstowards;
    private javax.swing.JComboBox comboModel;
    private javax.swing.JComboBox comboModel2;
    private javax.swing.JButton compare;
    private javax.swing.JButton export;
    private javax.swing.JButton highlight;
    private javax.swing.JButton highlightselected;
    private javax.swing.JList iJlist;
    private javax.swing.JButton importantNodes;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel logoLabel;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JSpinner nagents;
    private javax.swing.JScrollPane scrollList;
    private javax.swing.JButton showStates;
    // End of variables declaration//GEN-END:variables
}
